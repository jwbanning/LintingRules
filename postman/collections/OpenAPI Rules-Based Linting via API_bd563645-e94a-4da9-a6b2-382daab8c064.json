{
    "info": {
        "_postman_id": "f9169edb-be31-4307-a6fb-01070cb24beb",
        "name": "OpenAPI Rules-Based Linting via API",
        "description": "This collection lints an OpenAPI using a public API, passing an OpenAPI and a URL for a set of rules to be used when linting, returning the assertions using the test results for the response. The API doesn't require authentication, and works to make linting on OAS documents as easy as possible.\n\n## Rules\nYou can explore [more rules](http://rules.linting.org/) via the rules catalog we are creating to help improve the rulesets available, and [submit a Github issue](https://github.com/postman-open-technologies/linting-rules/issues) if there is a rule you'd like to see or need help with.\n\n## Support\nFeel free comment on this collection, and the OpenAPI, and make forks of this collection to help iterate upon the design, or directly make the changes to the OpenAPI. [You can also submit issues via the GitHub repository for the project](https://github.com/postman-open-technologies/openapi-linting-api/issues), and play with the code behind.",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "UTILITY:  Fetch  API schema",
            "item": [
                {
                    "name": "Get all APIs",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "a8ad02fd-3f16-4e71-9f0b-90584af8b3f8",
                                "exec": [
                                    "//get the ID of the first API. ",
                                    "",
                                    "const response = pm.response.json()",
                                    "console.log(response);",
                                    "let firstId = response.apis[0].id;",
                                    "",
                                    "console.log(firstId)",
                                    "",
                                    "//Hardcoded to get a JSON schema of the API i have in the API builder Tab",
                                    "postman.setEnvironmentVariable(\"apiId\", 'bf1274bb-d687-418f-95a9-5bd45156251e');"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "9fcfe9f8-8ab8-4216-a1bf-1e962931ec0f",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "https://api.getpostman.com/apis",
                            "protocol": "https",
                            "host": [
                                "api",
                                "getpostman",
                                "com"
                            ],
                            "path": [
                                "apis"
                            ],
                            "query": [
                                {
                                    "key": "workspace",
                                    "value": "c90a3482-f80d-43d6-9dfb-0830f5e43605",
                                    "description": "Only return APIs that are inside the given workspace.",
                                    "disabled": true
                                },
                                {
                                    "key": "since",
                                    "value": "{{since}}",
                                    "description": "Only return APIs that have been updated after this time. Time is represented using the ISO 8601 date and time format.",
                                    "disabled": true
                                },
                                {
                                    "key": "until",
                                    "value": "{{until}}",
                                    "description": "Only return APIs that have been updated before this time. Time is represented using the ISO 8601 date and time format.",
                                    "disabled": true
                                },
                                {
                                    "key": "createdBy",
                                    "value": "{{createdBy}}",
                                    "description": "Only return APIs that have been created by the user ID represented by the given value.",
                                    "disabled": true
                                },
                                {
                                    "key": "updatedBy",
                                    "value": "{{updatedBy}}",
                                    "description": "Only return APIs that have been updated by the user ID represented by the given value.",
                                    "disabled": true
                                },
                                {
                                    "key": "isPublic",
                                    "value": "{{isPublic}}",
                                    "description": "Only return APIs with the corresponding privacy state. Public APIs have the isPublic value true; private APIs have the isPublic value false.",
                                    "disabled": true
                                },
                                {
                                    "key": "name",
                                    "value": "{{name}}",
                                    "description": "Only return APIs whose name includes the given value. Matching is case insensitive.",
                                    "disabled": true
                                },
                                {
                                    "key": "summary",
                                    "value": "{{summary}}",
                                    "description": "Only return APIs whose summary includes the given value. Matching is case insensitive.",
                                    "disabled": true
                                },
                                {
                                    "key": "description",
                                    "value": "{{description}}",
                                    "description": "Only return APIs whose description includes the given value. Matching is case insensitive.",
                                    "disabled": true
                                },
                                {
                                    "key": "sort",
                                    "value": "{{sort}}",
                                    "description": "The value of sort can be one of the names of the fields included in the response.",
                                    "disabled": true
                                },
                                {
                                    "key": "direction",
                                    "value": "{{direction}}",
                                    "description": "The sorting direction, which can be ascending or descending. The value can be asc to specify an ascending direction or desc to specify a descending direction. If none is specified, the default sorting direction is descending for timestamp and numeric fields and ascending otherwise. An ID is not considered a numeric field.",
                                    "disabled": true
                                }
                            ]
                        },
                        "description": "This call fetches all the APIs present in the specified workspace\n\nResponse contains an array named `apis` which would contain all the details of APIs present in the workspace.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                    },
                    "response": []
                },
                {
                    "name": "Get Single API",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "d733ec70-09d5-4c65-805e-cac1406e6c50",
                                "exec": [
                                    "//get the schema and set it to the var.. ",
                                    "",
                                    "const response = pm.response.json()",
                                    "console.log(response);",
                                    "let schema = response.api.versions[0].schemas[0].schema;",
                                    "console.log(schema)",
                                    "//need to make JSON",
                                    "postman.setEnvironmentVariable(\"schema\", schema);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "1be3f6f6-966b-4878-b8d2-034d0917606c",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "https://api.getpostman.com/apis/{{apiId}}",
                            "protocol": "https",
                            "host": [
                                "api",
                                "getpostman",
                                "com"
                            ],
                            "path": [
                                "apis",
                                "{{apiId}}"
                            ]
                        },
                        "description": "This call fetches a single API having the specified id.\n\nResponse contains an `api` object with all the details related to the queried API, namely, `id`, `name`, `summary`, `description` etc. \n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                    },
                    "response": []
                },
                {
                    "name": "Get Schema",
                    "id": "52f8a3d1-9dbb-47bc-9c23-526c97ec5262",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/schemas/{{schemaId}}",
                            "protocol": "https",
                            "host": [
                                "api",
                                "getpostman",
                                "com"
                            ],
                            "path": [
                                "apis",
                                "{{apiId}}",
                                "versions",
                                "{{apiVersionId}}",
                                "schemas",
                                "{{schemaId}}"
                            ]
                        },
                        "description": "This call fetches a single schema having the specified id.\n\nResponse contains a `schema` object with all the details related to the schema, namely, `id`, `language`, `type`, `schema` etc. \n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
                    },
                    "response": []
                }
            ],
            "id": "392349ff-c717-4872-bc29-99de62b1c350",
            "description": "This collection is to Fetch and Open API specification from the Postman API. The API is then set to an env var and used in the body of the the linting tests.\n\n**Note:** The schema must be in a JSON format at this time\n\nA Postman API key is required to Fetch the schema from the Postman API. Get key [here](https://postman.co/settings/me/api-keys)",
            "auth": {
                "type": "apikey",
                "apikey": [
                    {
                        "key": "key",
                        "value": "X-Api-Key",
                        "type": "string"
                    },
                    {
                        "key": "value",
                        "value": "{{api_key}}",
                        "type": "string"
                    }
                ]
            },
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "76b09b7a-4b78-4c7a-bc3e-5390aeccea70",
                        "type": "text/javascript",
                        "exec": [
                            ""
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "id": "746b4ea9-ffc9-419c-9ba7-9b1d8dc6b886",
                        "type": "text/javascript",
                        "exec": [
                            ""
                        ]
                    }
                }
            ]
        },
        {
            "name": "Contact Tests",
            "item": [
                {
                    "name": "Contact email",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "58cf16b2-47db-4b32-9da4-0a74a29a967d",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "b9b51a1d-bf3a-4d47-b0d1-b583c2963257",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants.\"\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/info-contact-email/",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "https://rules.linting.org//rules/info-contact-email/",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Contact url",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "ec8216b0-a27a-4c6b-bc30-f300fe0da855",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "f6885f9c-83c8-4eeb-9f66-a7ebe31ad2ac",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants.\"\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/info-contact-url/",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "https://rules.linting.org//rules/info-contact-url/",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Contact name",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "00b272ad-d3f3-4db7-a7a7-b225c9e7a6cb",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "e7a01795-699d-4099-ad3e-70a61992b5e2",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants.\"\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/info-contact-name/",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "https://rules.linting.org//rules/info-contact-name/",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Contact information available",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "9e6c1292-1cea-4d26-b349-fb9641e8946e",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "113ec41e-a00a-4c20-992a-dba3a33d4ba5",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants.\"\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/info-contact/",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "https://rules.linting.org//rules/info-contact/"
                                }
                            ]
                        }
                    },
                    "response": []
                }
            ],
            "id": "7c33ee89-24a0-482d-b7c8-b13e81a18f2f"
        },
        {
            "name": "Info Tests",
            "item": [
                {
                    "name": "Title Tests",
                    "item": [
                        {
                            "name": "Must have a Title",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "f7b6778c-52b0-4f4e-865d-760ef749dae1",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "82e1722d-b867-4a43-b2d3-ee1bf8ddfaa9",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{{schema}}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/info-title/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/info-title/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Title must be Kebab Case",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "d6098e26-ea58-46c8-b95f-22db29cc1298",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "bc561bac-f844-43cc-bb7a-771ae679fa6b",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"version\": \"v0.1.0\",\n      \"title\": \"restaurants-are-great\",\n      \"description\": \"This is the API for managing detail of the restaurants.\"\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=http://rules.linting.org/rules/info-title-in-kebab-case/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "http://rules.linting.org/rules/info-title-in-kebab-case/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Title must NOT contain certain words (REST|Public|Developer)",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "6cb074a6-43fc-409d-a9d2-a1ffd5fe2495",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "496f0557-b936-408c-b0b2-5c9ef65450cb",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"version\": \"v0.1.0\",\n      \"title\": \"REST API food\",\n      \"description\": \"This is the API for managing detail of the restaurants.\"\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/info-title-word-check/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/info-title-word-check/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Title cannot exceed 50 chars",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "c3c909cf-e0cc-4e9d-931a-21f9581c29d4",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "e57b623e-2716-4015-9e92-65b4189b3a18",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"version\": \"v0.1.0\",\n      \"title\": \"REST API food This is the API for managing detail of the restaurantsThis is the API for managing detail of the restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants .\"\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/info-title-max-length/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/info-title-max-length/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ],
                    "id": "c669f375-50f0-423f-b399-c71fa77d3450"
                },
                {
                    "name": "Summary",
                    "item": [
                        {
                            "name": "The API must have a summary applied",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "ab0f098d-0820-40ac-a323-71af3da8c043",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "757da0a6-d080-4d22-88b8-f6c34fb825ec",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants.\"\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/info-summary/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/info-summary/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Summary should not be more than 50 chars",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "f8cec7cb-7999-4f18-a13b-e21340f19e45",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "90231055-1069-4891-8493-de23fee363f7",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants.\",\n      \"summary\": \"This is a summary This is a summary This is a summary This is a summary This is a summary This is a summary This is a summary This is a summary This is a summary This is a summary This is a summary This is a summary This is a summary This is a summary This is a summary This is a summary This is a summary This is a summary v This is a summary This is a summary v This is a summary\"\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/info-summary-max-length/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/info-summary-max-length/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "The API summary not contain specific words, including REST, Public, and Developer.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "4fe210aa-bbee-4a10-80da-c41aefebfedd",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "41767de1-b6ed-4640-b7d0-9f77a7204e5d",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants.\",\n      \"summary\": \"This is a summary This is a summary This is a Developer summary This is a summary This is a summary This is a summary This is a summary This is a summary This is a summary This is a summary This is a summary This is a summary This is a summary This is a summary This is a summary This is a summary This is a summary This is a summary v This is a summary This is a summary v This is a summary\"\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/info-summary-word-check/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/info-summary-word-check/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ],
                    "id": "ae49e66e-4ae3-4541-ada3-cf2cecc9c2ed"
                },
                {
                    "name": "Description",
                    "item": [
                        {
                            "name": "API must have a description available.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "b751b23e-4984-46f8-8a23-9f8233ac23ab",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "be6a338f-5605-4cb3-8fde-9c62954ae969",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\"\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/info-description/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/info-description/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "The description of the API must not be greater than 250 characters",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "08232d8c-0273-473a-a959-bfbaf2fb3ad8",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "066ed37f-06ad-44d4-9cdd-63acfd4561ae",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the \"\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/info-description-max-length/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/info-description-max-length/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "The API description must not contain specific words, including REST, Public, and Developer.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "313bd97b-26a3-4462-b00b-039662619693",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "364675e6-9c02-4576-99ce-3dce9a768e8a",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for REST managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\"\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/info-description-word-check/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/info-description-word-check/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ],
                    "id": "c60b669e-23b5-441d-b82d-f5c86edea8a1"
                },
                {
                    "name": "Version",
                    "item": [
                        {
                            "name": "The API must have version information applied.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "b963887b-44bf-4c6f-b87b-6c46416ffd39",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "2da14d8d-b314-440b-8895-cb208dd8e92d",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\"\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/info-version/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/info-version/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ],
                    "id": "e6118811-0760-4a1b-91a3-3cdbea1cfddb"
                },
                {
                    "name": "License",
                    "item": [
                        {
                            "name": "API must have a license applied.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "69a06222-6a9d-4301-be45-2289ed28e91c",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "f112fdd5-c856-42b3-b4f2-eed60dcedc54",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/info-license/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/info-license/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "API must have a license name applied.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "81c4bdb7-2d12-4136-bb5a-26e7e6896d44",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "2f552207-927b-4ff0-81cb-6f14d70ee4a8",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"url\": \"MIT\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/info-license-name/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/info-license-name/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "API must have a license url applied.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "fa1b22a8-c7f1-423c-a36f-e2d3d40a7415",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "c678f16a-0806-492a-8bcc-44a7ff056a3e",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"MIT\",\n        \"url\":\"http://api.example.com/\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/info-license-url/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/info-license-url/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "API must have an Apache license applied.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "3e116e0e-176c-4ca6-b503-979851235e66",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "e9cb8c1e-a8a2-4d63-a32a-78a22e7225e7",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"MIT\",\n        \"url\":\"ssss.org\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/info-license-url-apache/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/info-license-url-apache/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "API must have a MIT license applied.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "d071c673-5c37-46ff-aae3-b24d4b223eef",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "77f5d38a-44d2-484e-beeb-a94dca7611f7",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"MIT\",\n        \"url\":\"mit.edu\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/info-license-url-mit/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/info-license-url-mit/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ],
                    "id": "a9fd4ecb-65da-4137-bcc2-e7a001ba29e8"
                },
                {
                    "name": "Terms of Service",
                    "item": [
                        {
                            "name": "The API must have a terms of service applied.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "53241d51-17e0-4585-8326-8631056abefa",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "0d2f7904-7994-45e4-b383-642eb7038fd0",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/info-terms-of-service/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/info-terms-of-service/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ],
                    "id": "0309e0f8-a8fc-4b4d-9028-e4b77dd6bd8e"
                }
            ],
            "id": "fafef0f2-612b-46ef-be35-6e017d862999",
            "description": "The following tests are done for elements within the `info` tag for Open API spec."
        },
        {
            "name": "NEED TO TEST > Operations Tests",
            "item": [
                {
                    "name": "Tags",
                    "item": [
                        {
                            "name": "Operation must have tags.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "f7bc3e9e-22fd-4787-901a-aded3ce74dfc",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "c2581aca-2692-4670-8d86-8bf42f855ec3",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/operations-tags/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/operations-tags/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Must have at least one tag.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "cb4f9bd0-1eb8-416b-909e-028542976d64",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "fbe243d1-b725-4639-9c9f-7ac13762b7f7",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/operations-tags-one/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/operations-tags-one/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ],
                    "id": "c6349da1-f3bd-4c64-abf0-289599a092ec"
                },
                {
                    "name": "Description",
                    "item": [
                        {
                            "name": "Description should be less than 20 characters",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "57948c3c-33e1-48b7-b108-26e7a7ce9fd7",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "d2fcbaec-fabb-4d21-85e7-850d6af35ead",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/operations-description-length/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/operations-description-length/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Must NOT contain specific words (i.e. REST, Public, and Developer)",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "c8256cf9-3e75-4c0f-961a-0c010f621656",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "b38dd2df-bfe1-456e-8220-6235ec858ecc",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/operations-description-words-check/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/operations-description-words-check/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Operations must have a descriptions",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "54b897a2-b4f7-49de-ab15-a448b11c174f",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "364b8e30-ffde-44fa-9aff-b51a750544a8",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/operations-description/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/operations-description/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ],
                    "id": "c312cac5-483d-4c7d-9c37-56a409198cc3"
                },
                {
                    "name": "OperationId",
                    "item": [
                        {
                            "name": "Operation IDs MUST be written in camel Case.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "7b4bd493-83a9-42ff-8846-aafc5df16e1c",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "695e8c25-4487-4b23-b73c-f19d85e9e562",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/operations-operationids-camel-case/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/operations-operationids-camel-case/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Operation IDs MUST be written in Pascal Case.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "12295ff1-2abf-481d-be6a-759501d2b448",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "9553aeb2-f69c-416d-9a4b-9e89a8f483c6",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/operations-operationids-pascal-case/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/operations-operationids-pascal-case/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Operation IDs MUST be written in Kebab case.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "bb3a6cd4-8d74-44f5-b50c-717e5d82965c",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "afe30471-06b2-4cea-8745-7801a9655fda",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/operations-operationids-kebab-case/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/operations-operationids-kebab-case/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ],
                    "id": "5572f325-4d1e-41f5-a2b7-a01b6fe8afc1"
                },
                {
                    "name": "Summary",
                    "item": [
                        {
                            "name": "Length - less than 20 characters",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "4d7784a6-774d-4fe3-b3c3-404a7d5551db",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "c61f79e8-b164-4658-894d-26d484efb00a",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/operations-summary-length/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/operations-summary-length/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Must NOT contain specific words (i.e.REST, Public, and Developer)",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "3b22159e-5cbd-4393-823b-dad30b4abacf",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "6a8635c5-efa1-4dd8-83fd-965648dcb604",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/operations-summary-words-check/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/operations-summary-words-check/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Operations must include a summary",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "51220bb1-435b-46f0-a9d7-8b42cffbb20c",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "705aef46-d4a4-4c9a-bce1-d293c506b172",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/operations-summary/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/operations-summary/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ],
                    "id": "f9f97fee-458b-4755-b362-7fa18075a205"
                }
            ],
            "id": "2b78beab-489c-4b02-97ef-0353b7282ce0"
        },
        {
            "name": "Parameter Tests",
            "item": [
                {
                    "name": "A required parameter should not specify a default value.",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "a80582cf-7603-428f-8283-4957151a10ca",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "4a2555cc-7649-40a5-8c93-841007bea764",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "The description can't be more than 20 characters.",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "d5613c75-e874-44c3-b9fe-8c5ecfc6b226",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "35940c2e-f009-4064-859d-3fcfed9a316a",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{{schema}}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/parameters-description-length/",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "https://rules.linting.org//rules/parameters-description-length/",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Must not contain specific words, including REST, Public, and Developer.",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "8b54edff-4d63-41c9-aecc-69f560e6e5b5",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "15b6b70b-e859-4231-8f77-0c8df845de83",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Must not contain specific words, including REST, Public, and Developer.",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "c4fe257b-ec75-4f5d-ab42-42c990bca5c5",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "782e47f9-d5a3-4efe-80da-79051116e9a0",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Parameters must have a example.",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "d8493952-905b-4911-9884-1cc1a3f7edbe",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "f67b1e76-2b93-4c8a-b9e8-f709ef611895",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Parameters must have an in.",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "d55c4355-fd05-4a93-af8f-8684ad3f3e42",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "baebdc04-2f08-4865-a2f8-20ab5514d019",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Path and query parmeters must use camelCase.",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "6dd5f465-d1e8-40bc-bdb7-ef20100dd9ce",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "ac0f5ad2-2ebf-4e85-9721-d5fb0888a548",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "The name can't be more than 20 characters.",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "63384ea2-963c-44a2-8ee2-4007eebdd64a",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "68c1b566-2532-409f-95b2-23043b8b8b8f",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Path and query parmeters must use PascalCase.",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "d8cf3c92-3f58-4024-a39a-4649c94c8f12",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "07ad721c-ddfc-47c6-8436-2b095df21b14",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Path and query parmeters must use snake_case.",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "0675c68e-2282-4cf9-96aa-cc769f85f9d1",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "9633503f-cc1a-49ac-b385-9c343166b578",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants_snake\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token_snake\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants_snake/{restaurantId}_snake\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId_snake\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty_snake\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId_snake\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId_snake\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/parameters-name-snake-case/",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "https://rules.linting.org//rules/parameters-name-snake-case/",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Must not contain specific words, including REST, Public, and Developer.",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "2e392a87-be1a-448c-8bac-999e6cf3d69c",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "279b3326-b2e4-41fc-a173-549f44179df1",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Parm name must not contain specific words, including REST, Public, and Developer",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "f042f50b-5c97-4ca3-900d-dd4b368d1fd0",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "983ed160-3923-4e14-8d2b-63c64fb2d872",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Parameters must have a schema.",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "949d9168-72a7-4274-a2d5-2f92375c9fcf",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "5550f2ca-ea51-4a50-9566-53fa9050c4cc",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Parameters schema must have a schema.",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "d9cdabe5-7f2c-4532-af30-2b7d9da7ea80",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "6fd0fee0-fb1f-43a1-a41c-2a9f534f4fce",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                }
            ],
            "id": "b6b818b7-374b-4f9e-abfa-97da359ca81b"
        },
        {
            "name": "Path Tests",
            "item": [
                {
                    "name": "Paths Not Empty",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "f8d71eec-1772-44ea-b73e-2c30cca4a9e1",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "196f46b7-7fb4-400e-bcfd-7e53509554ea",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/paths-no-empty/",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "https://rules.linting.org//rules/paths-no-empty/",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Paths MUST end in a trailing Slash",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "766840aa-0ab2-453a-b566-bea15ab3aeaf",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "4defb055-c603-4be0-bce9-1d7608967510",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/paths-trailing-slash/",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "https://rules.linting.org//rules/paths-trailing-slash/",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Paths must NOT end in a trailing Slash",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "c125dece-6b2d-414d-be86-606f87c52260",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "f8c1659d-4af5-41fc-97c7-dd63e8a91e57",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants/\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/paths-trailing-slash-none/",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "https://rules.linting.org//rules/paths-trailing-slash-none/",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Paths must NOT have Dashes",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "de30673d-ca75-4485-8ec5-40df88a0d41d",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "ea20827e-8884-4838-a074-21c53d1e3674",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/paths-dashes/",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "https://rules.linting.org//rules/paths-dashes/",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Paths Lowercase Hyphens - MUST use lowercase separate words with hyphens for path segments",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "ced9347d-e9d9-4ce6-971a-9d68c41041fd",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "33f1f581-1589-4b8a-9fbb-1691657c3f37",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants-ddd\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/paths-lowercase-hyphens/",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "https://rules.linting.org//rules/paths-lowercase-hyphens/",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        },
                        "description": "How to test this linting rule:\n\nHow to fall this linting rule:"
                    },
                    "response": []
                }
            ],
            "id": "940e1342-9dac-4275-ac75-b9ba7afa23df",
            "description": "A ruleset that focus on governance applied to the paths object of the OpenAPI."
        },
        {
            "name": "Request Bodies",
            "item": [
                {
                    "name": "DELETE methods must have a request body.",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "78cd2025-738e-4a9c-aa70-cef2461a32b5",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "1b2f7b58-431f-4480-a696-7c717d61e124",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/request-bodies-delete-oas3/",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "https://rules.linting.org//rules/request-bodies-delete-oas3/",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "GET methods must have a request body.",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "31415add-1c46-415f-ae04-d332e93b2a38",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "ace77516-5221-4566-b27d-b07ebffd11ba",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/request-bodies-get-oas3/",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "https://rules.linting.org//rules/request-bodies-get-oas3/",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "PATCH request bodies must have a application/json media type.",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "0c1202ba-fe63-4c07-95a5-bede2c486654",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "33bcea6d-0a42-4927-93cc-a463359cf000",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/request-bodies-patch-media-type-oas3/",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "https://rules.linting.org//rules/request-bodies-patch-media-type-oas3/",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "PATCH methods must have a request body.",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "400a1092-adf7-4dab-96ed-04a24696af00",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "dc85e2cb-34f7-41e2-9e93-63f8e1f32bb1",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/request-bodies-patch-oas3/",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "https://rules.linting.org//rules/request-bodies-patch-oas3/",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "POST request bodies must have a application/json media type.",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "eb565e89-544e-457f-8a61-b04a42326fb0",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "e317db94-42ef-46db-8b62-c256ca6b9cbf",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/request-bodies-post-media-type-oas3/",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "https://rules.linting.org//rules/request-bodies-post-media-type-oas3/",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "POST methods must have a request body.",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "bba970b8-266f-4061-9874-b150918ae8a9",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "ea3e2d8b-7b99-44ec-86dd-82154b244dee",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/request-bodies-post-oas3/",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "https://rules.linting.org//rules/request-bodies-post-oas3/",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "PUT request bodies must have a application/json media type.",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "87b44447-1d88-4d0c-8462-413026309da6",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "573781b9-d5dc-41f8-bdf9-2dd74a5c9386",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/request-bodies-put-media-type-oas3/",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "https://rules.linting.org//rules/request-bodies-put-media-type-oas3/",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "PUT methods must have a request body.",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "4f4c0497-3a30-4b4c-af40-39577f6d61b0",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "d38c8f5d-08df-4159-8dd0-41b444c2fe41",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/request-bodies-put-oas3/",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "https://rules.linting.org//rules/request-bodies-put-oas3/",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                }
            ],
            "id": "8e435c46-784c-4191-9075-20cda34a6164"
        },
        {
            "name": "Response Tests",
            "item": [
                {
                    "name": "GET response tests",
                    "item": [
                        {
                            "name": "Response Get 200 Status Code - A get operation should have a 200 response.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "46c6a61c-29e9-431a-9d1b-1c547a5aaac5",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "f3a856f5-5e4b-4e72-83ba-76dc6a1da4ab",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/response-get-200-status-code/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/response-get-200-status-code/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Response Get 200 Media Type - GET responses should not have body.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "594b10be-f617-4170-9bbc-e9d9ff36af18",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "655159e8-e05b-4ef2-9363-86cdb6a43fa0",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/response-get-200-media-type/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/response-get-200-media-type/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Response Get 200 No Body - GET responses should not have body.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "66ad9238-e49c-4780-b92a-9adbb9f92f6d",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "86fdfefa-ed66-4b68-aa16-f28c80a755da",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/response-get-200-no-body/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/response-get-200-no-body/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Response Get 500 Status Code - A get operation should have a 500 response.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "8156105e-32c2-4670-8f38-3da6fc092114",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "7f5f3f13-75e4-4d84-a91b-343d5005bacd",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            },\n            \"500\": {\n              \"description\": \"fail\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            },\n            \"500\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/response-get-500-status-code/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/response-get-500-status-code/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Response Get 500 Media Type - GET responses should have a 500 with Problem JSON media type.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "0f809588-c5fd-49e6-b8d4-5128a9a97933",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "54a99d04-cf61-4dc9-963a-de12365c665d",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            },\n            \"500\": {\n              \"description\": \"fail\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            },\n            \"500\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/response-get-500-media-type/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/response-get-500-media-type/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ],
                    "id": "5a7adba2-d3ed-45a3-88fd-fe17cf567400"
                },
                {
                    "name": "POST response tests",
                    "item": [
                        {
                            "name": "Response Post 201 Status Code - A post operation should have a 201 response.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "79af45bc-ec6f-4b57-a120-73716d977961",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "9b5245d5-5049-4535-b90b-436d6604631f",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/response-post-201-status-code/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/response-post-201-status-code/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Response Post 201 Media Type - POST responses should have a JSON body.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "20bd6398-5bb3-4d74-8bbd-487f894dcc1a",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "2c3961c7-6c64-4eda-b40c-5f0638fabfcc",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/response-post-201-media-type/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/response-post-201-media-type/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Response Post 500 Status Code - A post operation should have a 500 response.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "10458b3d-3bd8-4697-9df2-bec7e2b29e0e",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "0839d8c5-fef4-47db-afde-b93a28a95a38",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            },\n            \"500\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/response-post-500-status-code/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/response-post-500-status-code/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Response Post 500 Media Type - POST responses should have a 500 with Problem JSON media type.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "ef333129-7beb-497d-a7d1-64b2ee20f505",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "bb2be0da-6460-4959-a8d8-6c776080092f",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/response-post-500-media-type/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/response-post-500-media-type/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ],
                    "id": "ae7b51ac-ecce-4d30-842d-f02959e2a798"
                },
                {
                    "name": "PUT response tests",
                    "item": [
                        {
                            "name": "Response Put 204 Status Code - A put operation should have a 204 response.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "62ae5bb3-c50c-4a28-9e16-93be7ae5690f",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "c306e708-7e5e-4a2d-a497-5ff687cb0268",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/response-put-204-status-code/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/response-put-204-status-code/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Response Put 204 No Body - PUT responses should not have body.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "e39a9437-8b2f-4a3f-8d92-209235cd9ed0",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "b491f3fd-983b-44aa-886f-422d5c398065",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/response-put-204-no-body/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/response-put-204-no-body/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Response Put 500 Status Code - A put operation should have a 500 response.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "61d85392-1d59-48ef-9380-60ffcb2bd2cc",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "be4257eb-ad53-4ba3-bdcc-fa895a502f82",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/response-put-500-status-code/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/response-put-500-status-code/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Response Put 500 Media Type - PUT responses should have a 500 with Problem JSON media type.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "a41b3348-32b1-46a5-8777-393f2696f780",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "10430274-7b7f-4977-8c5a-2b51bbbe381f",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/response-put-500-media-type/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/response-put-500-media-type/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ],
                    "id": "0440b3e8-29bb-49f7-b15a-505602220deb"
                },
                {
                    "name": "DELETE response tests",
                    "item": [
                        {
                            "name": "Response Delete 204 Status Code - A delete operation should have a 204 response.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "51b3caf4-f135-4997-8b58-7b3cc96b6aa8",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "38b6bbc1-ed45-4664-9da3-fecbaeb14c62",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/response-delete-204-status-code/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/response-delete-204-status-code/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Response Delete 204 No Body - DELETE responses should not have body.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "361464fc-6bc4-43eb-9f37-215e86bcccb4",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "68810e56-bdcf-4564-8620-f60a4e523181",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/response-delete-204-no-body/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/response-delete-204-no-body/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Response Delete 500 Status Code - A delete operation should have a 500 response.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "5abdff6d-d32f-4961-8958-001379d68f98",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "15df8908-2208-43b9-8ffa-1e54629167bc",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            },\n             \"500\": {\n              \"description\": \"500 response\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/response-delete-500-status-code/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/response-delete-500-status-code/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Response Delete 500 Media Type - DELETE responses should have a 500 with Problem JSON media type.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "0fe6cacf-243e-4101-8b29-f6597dca3930",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "f175f690-54f2-4d89-a6f7-4f5d925b789c",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ],
                    "id": "e9295e89-9824-4463-9846-3c92016c7d5a"
                }
            ],
            "id": "947006d6-28dc-4d17-9d43-f9ea6367ddf9"
        },
        {
            "name": "NEED TO TEST > Schema Tests",
            "item": [
                {
                    "name": "Description",
                    "item": [
                        {
                            "name": "Desc - All schemas properties should have a description.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "236af253-466c-49be-8767-c7add01fc14e",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "a4bddea8-6c14-41b7-a2db-705376b844e6",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/schema-description/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/schema-description/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Length - All schemas descriptions should be shorter than 20 characters.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "f72a770d-5f08-4a86-889f-37bbe2f68261",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "65364a3f-c9e3-4d0b-be54-4f3338d03961",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/schema-description-length/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/schema-description-length/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Words - Some words should NOT be be contained within the schema description.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "7a9b6ac0-dacc-486f-b65d-bdee78d3a150",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "873385a6-2e7c-4e90-8242-11f31747c447",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/schema-description-words/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/schema-description-words/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ],
                    "id": "897d8f3c-2732-42a0-a5ee-6345b1aff2a1"
                },
                {
                    "name": "Names",
                    "item": [
                        {
                            "name": "Camel Case - Schema names should be camel case.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "08373b25-1d64-4754-8a4f-a95d2b35f520",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "93c9b31b-7ff6-4ddd-8eaf-520294210798",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/schema-names-camel-case/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/schema-names-camel-case/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Pascal - Schema names should be pascal case.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "29ec5540-3223-4a10-abf8-ee39eef40494",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "4c9fe60b-4369-45a2-ab0d-2a9c06c46454",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/schema-names-pascal-case/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/schema-names-pascal-case/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Snake - Schema names should be snake case.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "34597734-38da-44c4-8626-8df7ac550a8e",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "00c7632d-9656-4557-805d-bf7fa4dec250",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/schema-names-snake-case/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/schema-names-snake-case/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Length - Schema names should be no more than 10 characters.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "491d0fb5-67b3-49c6-8d6f-2f2fd327c3b1",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "96236bf1-de88-4228-95fd-b6844f8fffcc",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/schema-names-length/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/schema-names-length/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Words - Schema names should NOT contain certain words.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "8a944cc4-d40e-4ace-9327-83fb30ef727f",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "cacc42a4-69df-42e0-91e4-848b1a2b1d87",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/schema-names-words/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/schema-names-words/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ],
                    "id": "9644a0f9-56bd-4a14-ae89-434e0bc16905"
                },
                {
                    "name": "Properties",
                    "item": [
                        {
                            "name": "Properties - All schemas should have a properties.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "3074b9da-3d92-45e7-994c-c1a687b69531",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "094918ff-0437-4cfd-b91c-d521bb0cb5b8",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/schema-properties/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/schema-properties/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Type - All schemas properties should have a type.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "588a11c4-2644-4130-a93c-4ce19442846e",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "743bb858-13d4-496a-a363-90dbc606eb22",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/schema-properties-type/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/schema-properties-type/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Descriptions - All schemas properties should have a description.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "f65c6f34-4b33-4fb3-b9f1-b4ddcd34ee42",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "1e1d1cb7-d3fe-4d68-a999-02c9e3473057",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/schema-properties-descriptions/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/schema-properties-descriptions/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Descriptions Length - The length of the description needs to be lest than 20 characters.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "305d4420-e874-4073-8a6b-e75ad13d9b74",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "09b01a3d-ebb8-4bfa-8286-e75305671fb9",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/schema-properties-descriptions-length/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/schema-properties-descriptions-length/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Descriptions Words - Some words should NOT exist within the property description.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "1c681cb3-0efd-4172-8eb2-c1929b3c9754",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "584aa76f-7409-4a48-8d68-63d4baf1fef2",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/schema-properties-descriptions-words/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/schema-properties-descriptions-words/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Maximum - All schemas properties should have a maximum.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "b9e6c23e-5db7-4862-9430-4fc8a5e6bec9",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "e4dfc64b-9c2e-463c-8e20-3249d826ef6d",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/schema-properties-maximum/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/schema-properties-maximum/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Minimum - All schemas properties should have a minimum.",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "d91adb7d-0ace-41cb-a040-1566fe072cf1",
                                        "exec": [
                                            "var response = pm.response.json();",
                                            "",
                                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                            "const v = [];",
                                            "",
                                            "for (result of response) {",
                                            "  if (result.status === 'failed') {",
                                            "    const { code, failure: { message, range, severity } } = result; ",
                                            "    const sev = failureSeverity[severity]",
                                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                            "  } else if (result.status === 'passed') {",
                                            "    const { code, message } = result; ",
                                            "    pm.test(`${message} (${code})`, () => {",
                                            "      pm.expect(true).to.be.true;",
                                            "    });",
                                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                            "  }",
                                            "}",
                                            "",
                                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "c77d2861-586c-4794-bbca-9df3961b6569",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/schema-properties-minimum/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "linter",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "rulesUrl",
                                            "value": "https://rules.linting.org//rules/schema-properties-minimum/",
                                            "description": "A dynamic ruleset build from multiple description rules."
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ],
                    "id": "8ae3f208-f13d-4cfa-b89b-7629426c3721"
                },
                {
                    "name": "Required - All schemas properties should have a required.",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "0b5c5dc2-2e14-439e-99f0-e51bf665e307",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "6ce4f4cf-ac4c-4e02-8562-34f89860d4af",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/schema-required/",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "https://rules.linting.org//rules/schema-required/",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Type - All schemas should have a type.",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "9f3483a0-a3e5-4d1c-af23-e3f1fc0128b0",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "1496172d-502b-4461-8ff8-bdde88893807",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/schema-type/",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "https://rules.linting.org//rules/schema-type/",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                }
            ],
            "id": "3e195095-6237-4a63-9ad6-70df675cc623"
        },
        {
            "name": "Tag Tests",
            "item": [
                {
                    "name": "Operation must have tags.",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "ac954638-acfa-40cc-890b-ad153f39bc72",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "7184b87c-4f11-4152-b2d3-8fd4440424bf",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/operations-tags/",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "https://rules.linting.org//rules/operations-tags/",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Must have at least one tag.",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "07bc82ce-205a-4013-b131-ff30a53e5273",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "4b9eaad7-9627-48e3-ab12-1fb73343c705",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Must have tags object.",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "469675eb-bab1-4898-bcff-4efd423605ce",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "277de4a2-3fa9-487c-9b8c-e2052ae41071",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Tags One - Must have at least one tag.",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "94685533-b89e-4eb4-8c2b-6ef363f8d4fa",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "a06ec36e-cf7c-4fbc-a600-e6803c9154d1",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Tags must have a name.",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "8a926afd-d69c-41ae-ab9f-67a457005c3c",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "d0eb47ad-663f-495b-9428-c3c23ca0ae3e",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Tags must have a description.",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "29cf156f-12ba-49c2-b2f5-c1ba7f093186",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "bac44cf9-6c6b-46d9-ac56-c0f865c36aaf",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                }
            ],
            "id": "17b800f7-ab0b-4d4b-8894-62769ec2c077",
            "description": "This ruleset that focus on governance applied to the tags object of the OpenAPI."
        },
        {
            "name": "Versioning Tests",
            "item": [
                {
                    "name": "OpenAPI specification version must be 3.0.3.",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "7326d328-5c4c-47eb-b224-8970c995215d",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "a8c1d046-126c-49e5-9536-220fc22d1e6d",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/version-openapi/",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "https://rules.linting.org//rules/version-openapi/",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Specs should follow inception date based versioning eg. 2020–01–01.",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "d1372d27-ca0e-428f-a7c5-9a9e1bf853ee",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "fd31287e-80d7-4bcd-8799-3f709f609d9f",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"2020–03–11\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/version-date-format/",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "https://rules.linting.org//rules/version-date-format/",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "The API version field should follow [semantic versioning](https://semver.org/#semantic-versioning-specification-semver).",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "63bd80d7-e974-4a32-aa53-e8aa923aa11e",
                                "exec": [
                                    "var response = pm.response.json();",
                                    "",
                                    "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                                    "const v = [];",
                                    "",
                                    "for (result of response) {",
                                    "  if (result.status === 'failed') {",
                                    "    const { code, failure: { message, range, severity } } = result; ",
                                    "    const sev = failureSeverity[severity]",
                                    "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                                    "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                                    "  } else if (result.status === 'passed') {",
                                    "    const { code, message } = result; ",
                                    "    pm.test(`${message} (${code})`, () => {",
                                    "      pm.expect(true).to.be.true;",
                                    "    });",
                                    "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                                    "  }",
                                    "}",
                                    "",
                                    "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "6340e6dc-c4b5-4149-a798-c0723bf3d501",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n      \"termsOfService\":\"this is the terms of service\",\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants. This is the API for managing detail of the restaurants.\",\n      \"license\": {\n        \"name\": \"Some Name\"\n        }\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/linter/?rulesUrl=https://rules.linting.org//rules/version-semantic/",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "linter",
                                ""
                            ],
                            "query": [
                                {
                                    "key": "rulesUrl",
                                    "value": "https://rules.linting.org//rules/version-semantic/",
                                    "description": "A dynamic ruleset build from multiple description rules."
                                }
                            ]
                        }
                    },
                    "response": []
                }
            ],
            "id": "4a047e2b-6251-402d-a1c6-64feca99fcab"
        },
        {
            "name": "Lint OpenAPI",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "id": "6bcf1e5a-84fb-40c9-907c-59966d1f78b6",
                        "exec": [
                            "var response = pm.response.json();",
                            "",
                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                            "const v = [];",
                            "",
                            "for (result of response) {",
                            "  if (result.status === 'failed') {",
                            "    const { code, failure: { message, range, severity } } = result; ",
                            "    const sev = failureSeverity[severity]",
                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                            "  } else if (result.status === 'passed') {",
                            "    const { code, message } = result; ",
                            "    pm.test(`${message} (${code})`, () => {",
                            "      pm.expect(true).to.be.true;",
                            "    });",
                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                            "  }",
                            "}",
                            "",
                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "id": "78f0f6d1-fd59-4cb1-aece-7ffabc95612a",
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "request": {
                "method": "POST",
                "header": [],
                "body": {
                    "mode": "raw",
                    "raw": "{\n    \"openapi\": \"3.0.3\",\n    \"info\": {\n      \"version\": \"v0.1.0\",\n      \"title\": \"Restaurants\",\n      \"description\": \"This is the API for managing detail of the restaurants.\"\n    },\n    \"servers\": [\n      {\n        \"url\": \"http://api.example.com/\"\n      }\n    ],\n    \"paths\": {\n      \"/restaurants\": {\n        \"get\": {\n          \"summary\": \"Restaurants\",\n          \"operationId\": \"getRestaurants\",\n          \"parameters\": [\n            {\n              \"name\": \"token\",\n              \"in\": \"header\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int64\"\n                }\n              },\n              \"style\": \"simple\"\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/RestaurantListing\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"post\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"addRestaurant\",\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"201\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"/restaurants/{restaurantId}\": {\n        \"get\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"getRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            {\n              \"name\": \"newProperty\",\n              \"in\": \"query\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"Restaurant\",\n              \"content\": {\n                \"application/json\": {\n                  \"schema\": {\n                    \"$ref\": \"#/components/schemas/Restaurant\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"put\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"updateRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"requestBody\": {\n            \"description\": \"Restaurant\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Restaurant\"\n                }\n              }\n            }\n          },\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        },\n        \"delete\": {\n          \"summary\": \"Restaurant\",\n          \"operationId\": \"deleteRestaurant\",\n          \"parameters\": [\n            {\n              \"name\": \"restaurantId\",\n              \"in\": \"path\",\n              \"description\": \"The unique id.\",\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          ],\n          \"tags\": [\n            \"Restaurant\"\n          ],\n          \"responses\": {\n            \"204\": {\n              \"description\": \"Restaurant\"\n            }\n          }\n        }\n      }\n    },\n    \"components\": {\n      \"x-rules\": [\n        {\n          \"name\": \"custom parameter-description\",\n          \"object\": \"parameter\",\n          \"description\": \"custom parameter objects should have a description\",\n          \"truthy\": \"description\"\n        }\n      ],\n      \"schemas\": {\n        \"RestaurantListing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/components/schemas/Restaurant\"\n          }\n        },\n        \"Restaurant\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"servesCuisine\": {\n              \"description\": \"The cuisine of the restaurant.\",\n              \"type\": \"string\"\n            },\n            \"starRating\": {\n              \"description\": \"An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).\",\n              \"type\": \"object\",\n              \"format\": \"starRating\"\n            },\n            \"menu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            },\n            \"acceptsReservations\": {\n              \"description\": \"Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.\",\n              \"type\": \"string\"\n            },\n            \"hasMenu\": {\n              \"description\": \"Either the actual menu as a structured representation, as text, or a URL of the menu.\",\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://postman-demo.s3.amazonaws.com/telus_test.json",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "linter",
                        ""
                    ],
                    "query": [
                        {
                            "key": "rulesUrl",
                            "value": "https://postman-demo.s3.amazonaws.com/telus_test.json"
                        }
                    ]
                }
            },
            "response": []
        },
        {
            "name": "Lint AsyncAPI",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "id": "6bcf1e5a-84fb-40c9-907c-59966d1f78b6",
                        "exec": [
                            "var response = pm.response.json();",
                            "",
                            "const failureSeverity = ['error', 'warning', 'information', 'hint'];",
                            "const v = [];",
                            "",
                            "for (result of response) {",
                            "  if (result.status === 'failed') {",
                            "    const { code, failure: { message, range, severity } } = result; ",
                            "    const sev = failureSeverity[severity]",
                            "    pm.test(message, () => pm.expect.fail(`(${sev}) ${code}[${range.start.line},${range.start.character}]`));       ",
                            "    v.push(`<li><strong>${code}</strong> (${sev}) ${message}</li>`);",
                            "  } else if (result.status === 'passed') {",
                            "    const { code, message } = result; ",
                            "    pm.test(`${message} (${code})`, () => {",
                            "      pm.expect(true).to.be.true;",
                            "    });",
                            "    v.push(`<li><strong>${code}</strong> (success) ${message}</li>`);",
                            "  }",
                            "}",
                            "",
                            "pm.visualizer.set(`<ul>${v.join('')}</ul>`);"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "id": "f29b3058-91a4-4143-a62b-6063d8f08aab",
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "text/yaml",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "asyncapi: '2.2.0'\ninfo:\n  title: Streetlights API\n  version: '1.0.0'\n  description: |\n    The Smartylighting Streetlights API allows you\n    to remotely manage the city lights.\n  license:\n    name: Apache 2.0\n    url: 'https://www.apache.org/licenses/LICENSE-2.0'\nservers:\n  mosquitto:\n    url: mqtt://test.mosquitto.org\n    protocol: mqtt\nchannels:\n  light/measured:\n    publish:\n      summary: Inform about environmental lighting conditions for a particular streetlight.\n      operationId: onLightMeasured\n      message:\n        name: LightMeasured\n        payload:\n          type: object\n          properties:\n            id:\n              type: integer\n              minimum: 0\n              description: Id of the streetlight.\n            lumens:\n              type: integer\n              minimum: 0\n              description: Light intensity measured in lumens.\n            sentAt:\n              type: string\n              format: date-time\n              description: Date and time when the message was sent.",
                    "options": {
                        "raw": {
                            "language": "text"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/linter/?rulesUrl=https://gist.githubusercontent.com/kevinswiber/49a550f85cfc7a2ac73f3332ea1b41be/raw/82c8a7a8488dbaaa9ae2e48104bf7266ee85a638/.spectral.js",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "linter",
                        ""
                    ],
                    "query": [
                        {
                            "key": "rulesUrl",
                            "value": "https://gist.githubusercontent.com/kevinswiber/49a550f85cfc7a2ac73f3332ea1b41be/raw/82c8a7a8488dbaaa9ae2e48104bf7266ee85a638/.spectral.js"
                        }
                    ]
                }
            },
            "response": []
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "id": "0f3e64f3-96b2-420d-bd25-82d01e082580",
                "type": "text/javascript",
                "exec": [
                    ""
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "id": "c8f86d44-c39a-45e9-8445-2deacea364a9",
                "type": "text/javascript",
                "exec": [
                    ""
                ]
            }
        }
    ],
    "variable": [
        {
            "id": "a190c262-78f9-4c22-9c70-6ffe54b22843",
            "key": "baseUrl",
            "value": "https://uu61q0hha5.execute-api.us-west-2.amazonaws.com/Prod"
        }
    ]
}